[project]
name = "pyutils"
version = "0.2.2"
description = "Python utilities"
readme = "README.md"
requires-python = ">=3.13"
dependencies = []

[project.optional-dependencies]
logger = [
    "structlog>=25.2.0",
]
jpath = [
    "jsonpath-ng>=1.7.0",
]
pydantic = [
    "pydantic>=2.11.3",
]
fileapi = [
    "fileapi>=0.2.3",
    "fsspec[gs,s3,ssh]>=2025.3.2",
]
full = [
    "structlog>=25.2.0",
    "jsonpath-ng>=1.7.0",
    "pydantic>=2.11.3",
    "fileapi>=0.2.3",
    "fsspec[gs,s3,ssh]>=2025.3.2",
]

[tool.uv]
dev-dependencies = [
    "ipykernel>=6.29.5",
    "pyright>=1.1.399",
    "pytest>=8.3.5",
    "ruff>=0.11.6",
    "uv>=0.6.16",
    "visidata>=3.1.1",
]

[tool.uv.sources]
fileapi = { git = "https://github.com/parthspatel/fileapi-py", rev = "master" }


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.hatch.build.targets.wheel]
packages = ["src"]


[tool.pyright]
venvPath = "."
venv = ".venv"


[tool.ruff]
line-length = 120
indent-width = 4


[tool.ruff.format]
quote-style = "double"
indent-style = "tab"
docstring-code-format = true
skip-magic-trailing-comma = false


[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["src"]


[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "pydantic.validator", # Allow Pydantic's `@validator` decorator to trigger class method treatment.
]


[tool.dagster]
project_name = "ai-dev-pipeline"
module_name = "pipeline.v2.definitions"
code_location_name = "ai-dev-pipeline"
python_version = "3.13"


[tool.pytest]
testpaths = ["tests"]
log_format = "%(asctime)s [%(levelname)8s] %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
